/**
 * @fileoverview
 * This script adds custom preview image functionality to the FluxImagePreview node
 * within the ComfyUI interface. It loads the temporary image generated by the
 * Python backend and draws it directly onto the node's canvas.
 *
 * Target Node Class Name (Python): FluxImagePreview
 */

// Ensure the script logs its execution start for debugging
console.info("[FluxImagePreview Script] Starting execution.");

import { app } from "/scripts/app.js";
import { api } from "/scripts/api.js";

// Ensure LiteGraph is available
const LGraph = window.LiteGraph;
if (!LGraph) {
    console.error("[FluxImagePreview Script] LiteGraph not found on window object! Previews will not work.");
}

/**
 * Draws the provided image onto the node's canvas context, scaling it
 * appropriately to fit within the node's bounds below the title.
 * @param {LGraphNode} node The LiteGraph node instance.
 * @param {CanvasRenderingContext2D} ctx The canvas rendering context.
 * @param {HTMLImageElement} image The loaded image object to draw.
 */
function drawPreviewOnNode(node, ctx, image) {
    if (!image || !image.naturalWidth || !image.naturalHeight) {
        // Don't warn if image is null (intentionally cleared), only if it's an invalid object
        if (image) console.warn(`[FluxImagePreview Script] drawPreviewOnNode: Invalid image object provided for node ${node.id}.`);
        return;
    }

    // Calculate available drawing area within the node
    const nodeWidth = node.size[0];
    const nodeHeight = node.size[1];
    const margin = 5; // Small margin around the preview
    const availableWidth = nodeWidth - margin * 2;
    let availableHeight = nodeHeight - margin * 2;
    // Account for node title height (use LiteGraph constant if available)
    const titleHeight = (LGraph && LGraph.NODE_TITLE_HEIGHT) ? LGraph.NODE_TITLE_HEIGHT : 20;
    availableHeight -= titleHeight;
    const startY = titleHeight + margin; // Start drawing below the title

    // If no drawable space, exit
    if (availableWidth <= 0 || availableHeight <= 0) {
         console.warn(`[FluxImagePreview Script] Node ${node.id} - No available drawing space (${availableWidth.toFixed(1)}x${availableHeight.toFixed(1)}). Cannot draw preview.`);
         return;
    }

    // Calculate aspect ratios to scale image correctly
    const imgAspectRatio = image.naturalWidth / image.naturalHeight;
    const availableAspectRatio = availableWidth / availableHeight;
    let drawWidth, drawHeight, offsetX, offsetY;

    // Determine final drawing dimensions based on aspect ratios
    if (imgAspectRatio > availableAspectRatio) { // Image is wider than available space
        drawWidth = availableWidth;
        drawHeight = drawWidth / imgAspectRatio;
    } else { // Image is taller than available space
        drawHeight = availableHeight;
        drawWidth = drawHeight * imgAspectRatio;
    }

    // Calculate offsets to center the image within the available space
    offsetX = margin + (availableWidth - drawWidth) / 2;
    offsetY = startY + (availableHeight - drawHeight) / 2;

    // Draw the image onto the node's foreground canvas
    try {
        // Ensure calculated dimensions are valid before drawing
        if (drawWidth > 0 && drawHeight > 0) {
            ctx.drawImage(image, offsetX, offsetY, drawWidth, drawHeight);
            // console.log(`[FluxImagePreview Script] Node ${node.id} - ctx.drawImage executed.`); // Optional: Verbose log
        } else {
             console.warn(`[FluxImagePreview Script] Node ${node.id} - Calculated draw dimensions are zero or negative (${drawWidth.toFixed(1)}x${drawHeight.toFixed(1)}). Skipping draw.`);
        }
    } catch (error) {
        // Log any errors during the drawing process
        console.error(`[FluxImagePreview Script] Node ${node.id} - Error during ctx.drawImage:`, error);
        // Consider clearing node.previewImage here if drawing error occurs repeatedly?
        // node.previewImage = null; // Optional: clear image on draw error
    }
}

// Register the ComfyUI extension
app.registerExtension({
    // Provide a unique name for this extension logic
    name: "FluxCollection.FluxPreviewImageNode.Logic",

    /**
     * Called by ComfyUI when a node is created on the graph.
     * @param {LGraphNode} node The LiteGraph node instance that was created.
     */
    async nodeCreated(node) {
        // Target specific node type
        const targetNodeType = "FluxImagePreview"; // Only target the standalone preview node

        // Check if the created node is our target preview node
        let isTargetNode = false;
        if (node.type === targetNodeType || node.comfyClass === targetNodeType) {
            isTargetNode = true;
            console.info(`[FluxImagePreview Script] MATCH! Found target node (${targetNodeType}) ID ${node.id}. Initializing preview logic...`);
        }

        // If it's the target node, add custom logic
        if (isTargetNode) {
            // Add a property to the node instance to store the loaded preview image
            node.previewImage = null;

            // --- Override onDrawForeground ---
            // This function is called by LiteGraph when the node needs to be redrawn.
            // We use it to draw our loaded preview image onto the node's canvas.
            const original_onDrawForeground = node.onDrawForeground;
            node.onDrawForeground = function(ctx) {
                // Call the original drawing function first (if any)
                original_onDrawForeground?.apply(this, arguments);

                // Check if a valid preview image is loaded and ready to be drawn
                const previewExists = this.previewImage && this.previewImage.naturalWidth > 0;
                if (previewExists) {
                    try {
                         // Call our helper function to handle the actual drawing and scaling
                         drawPreviewOnNode(this, ctx, this.previewImage);
                    } catch(e) {
                         console.error(`[FluxImagePreview Script] Error during drawPreviewOnNode call for node ${this.id}:`, e);
                    }
                }
            };

            // --- Override onExecuted ---
            // This function is called when the node finishes execution on the backend.
            // We intercept the message from the backend to get the preview image details.
            const original_onExecuted = node.onExecuted;
            node.onExecuted = function(message) {
                 console.log(`[FluxImagePreview Script] onExecuted called for node ${this.id}. Message:`, message); // Log received message
                 this.previewImage = null; // Clear any previous image first

                // The 'FluxImagePreview' Python node returns the UI data directly in the message object
                let uiData = null;
                if (message?.ui?.images) {
                    uiData = message.ui;
                    console.log(`[FluxImagePreview Script] Node ${this.id} - Found ui data directly in message.`);
                } else {
                     console.warn(`[FluxImagePreview Script] Node ${this.id} - Message received does not contain expected {ui: {images: [...]}} structure.`);
                }

                // If we found valid image data in the message
                if (uiData?.images?.length > 0) {
                    const imgData = uiData.images[0]; // Use the first image for preview
                    console.log(`[FluxImagePreview Script] Node ${this.id} - Extracted image data:`, imgData);

                    // Validate required image data fields
                    if (!imgData.filename || !imgData.type) {
                        console.warn(`[FluxImagePreview Script] Node ${this.id} - Image data missing filename or type.`);
                        if (this.setDirtyCanvas) this.setDirtyCanvas(true, true); // Request redraw to clear old preview
                    } else {
                        // Construct the URL to view the temporary image via ComfyUI's API
                        const imageUrl = api.apiURL(`/view?filename=${encodeURIComponent(imgData.filename)}&type=${imgData.type}&subfolder=${encodeURIComponent(imgData.subfolder || '')}&t=${+new Date()}`);
                        console.log(`[FluxImagePreview Script] Node ${this.id} - Loading image from URL:`, imageUrl);

                        // Create an HTML Image element to load the preview
                        const img = new Image();
                        img.src = imageUrl;

                        // Define what happens when the image loads successfully
                        img.onload = () => {
                            console.log(`[FluxImagePreview Script] Image loaded successfully for node ${this.id}.`);
                             // Check if node still exists on the graph before updating it
                            if (app.graph.getNodeById(this.id)) {
                               this.previewImage = img; // Store the loaded image object on the node
                               // Request the node to be redrawn to show the new image
                               if (this.setDirtyCanvas) {
                                   this.setDirtyCanvas(true, true);
                                   console.log(`[FluxImagePreview Script] Node ${this.id} - Requested redraw via setDirtyCanvas.`);
                               } else {
                                   console.error(`[FluxImagePreview Script] Node ${this.id} - setDirtyCanvas method not found! Cannot request redraw automatically.`);
                               }
                            } else {
                                // Node was removed before image finished loading
                                console.log(`[FluxImagePreview Script] Node ${this.id} was removed before image loaded.`);
                            }
                        };

                        // Define what happens if the image fails to load
                        img.onerror = (e) => {
                            console.error(`[FluxImagePreview Script] Error loading preview image for node ${this.id}. URL: ${imageUrl}`, e);
                            // Ensure preview is cleared if loading fails
                            if (app.graph.getNodeById(this.id)) {
                               this.previewImage = null;
                               if (this.setDirtyCanvas) this.setDirtyCanvas(true, true);
                            }
                        };
                    }
                } else {
                    // No image data found in the message, ensure preview is cleared
                    console.log(`[FluxImagePreview Script] Node ${this.id} - No valid image data found in message. Clearing preview.`);
                    if (this.setDirtyCanvas) this.setDirtyCanvas(true, true);
                }

                // Call the original onExecuted function (if it existed) after our logic
                try {
                    original_onExecuted?.apply(this, arguments);
                } catch (e) {
                    console.error(`[FluxImagePreview Script] Error calling original onExecuted for node ${this.id}:`, e);
                }
            }; // End of node.onExecuted override

            // --- Override onRemoved ---
            // Clean up image reference if the node is removed from the graph
            const original_onRemoved = node.onRemoved;
            node.onRemoved = function() {
                console.log(`[FluxImagePreview Script] Node ${this.id} removed. Clearing image reference.`);
                this.previewImage = null;
                original_onRemoved?.apply(this, arguments); // Call original remove handler
            };

            console.log(`[FluxImagePreview Script] Custom preview logic initialization finished for node ${node.id}.`);

        } // End of if(isTargetNode)
    } // End of nodeCreated function
});

// --- DEBUG LOG: Confirm script execution end ---
console.log("[FluxImagePreview Script] script execution finished.");